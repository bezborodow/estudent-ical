#!/usr/bin/env perl
use strict;
use warnings;
use feature 'say';
use Data::ICal;
use Data::ICal::Entry::Event;
use Date::Calc qw(Delta_Days);
use Date::ICal;
use Time::Piece;

my $calendar = Data::ICal->new(
    rfc_strict => 1,
    auto_uid => 1,
);
my $event;

my $t = Time::Piece->new();
my %month;
@month{qw(jan feb mar apr may jun jul aug sep oct nov dec)} = 1..12;

my $i = 0;
my $n = 0;
my $course_code = "";
my $course_title = "";
my $class = "";

while (<>) {
    if ($_ =~ /(When: .+)/) {
        # Remove junk preceeding a When statement.
        $_ = $1;
    }

    # Skip lines beginning with junk.
    next if $_ =~ /^Registered Class/;
    next if $_ =~ /^Collapse$/;
    next if $_ =~ /^All Classes Registered/;
    next if $_ =~ /^Warning/;
    next if $_ =~ /^There are no classes that are on today or in the future for you to register./;
    next if $_ =~ /^Attention Required/;
    next if $_ =~ /^\d+ Class Not Available/;

    # This is a course code (e.g., ENGR1401.)
    if ($_ =~ /^([A-Z]{4}[0-9]{4})/) {
        $course_code = $1;
        print STDERR "$course_code ";
        $i = 0;

    # The line immediately after a course code is a course title.
    } elsif ($i == 1) {
        $course_title = $_;
        chomp $course_title;
        print STDERR "$course_title\n";

    # Parse When statements.
    } elsif ($_ =~ /^When:/) {
        if ($_ =~ /^When: (Once-only|Weekly|Fortnightly) on \S* (\d{2})-(\S{3}) to (\d{2})-(\S{3}), (\d+):(\d{2}) (am|pm) - (\d+):(\d{2}) (am|pm) Where: (.+)/) {
            my $start = Date::ICal->new(
                day => $2,
                month => $month{lc($3)},
                year => $t->year,
                hour => $6 + ($8 eq 'pm' and $6 != 12 ? 12 : 0),
                min => $7,
                sec => 0,
            );
            my $end = Date::ICal->new(
                day => $2,
                month => $month{lc($3)},
                year => $t->year,
                hour => $9 + ($11 eq 'pm' and $9 != 12 ? 12 : 0),
                min => $10,
                sec => 0,
            );

            my $interval = $1 eq "Fortnightly" ? 2 : 1;
            my $count = (Delta_Days($t->year, $month{lc($3)}, $2, $t->year, $month{lc($5)}, $4) + 1) / 7 / $interval;
            if ($1 eq "Once-only") {
                $count = 1;
            }

            $event = Data::ICal::Entry::Event->new();
            $calendar->add_entry($event);
            $event->add_properties(
                summary => "$course_code $course_title $class",
                description => "$class: $12",
                dtstart => $start->ical(localtime => 0),
                dtend => $end->ical(localtime => 0),
                rrule => "FREQ=WEEKLY;INTERVAL=$interval;COUNT=$count",
            );
            $n++;

            print STDERR "        ", $start->ical(localtime=>0), " - ", $end->ical(localtime=>0);
            print STDERR "; interval: $interval week; $count occurances.\n";
        } else {
            print STDERR "\nCannot parse: $_";
            print STDERR "Error: Cannot parse When statement for '$course_code' -- '$class'.\n";
            exit(1);
        }

    # This should be a class (e.g., Computer Lab, Lecture, etc.)
    } else {
        $class = $_;
        chomp $class;
        print STDERR "    $class\n";
    }

    $i++;
}

print STDERR "\nFound $n events.\n";
print STDERR "Done.\n";

print $calendar->as_string;
